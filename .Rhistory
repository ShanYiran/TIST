cat.pos = c(-20, 20),
ext.line.lty = "dotted",
ext.line.lwd = 3,
ext.pos = 12,
ext.dist = -0.12,
ext.length = 0.85
)
if(Score_show){
SD_score <- c()
SPARK_score <- c()
SD_gene <- unique(MD_gene$gene)[1:100]
Spark_gene <- features3[1:100]
ST_net <- readRDS(file = netfile)
KNN <- as_adjacency_matrix(ST_net)
KNN <- as.matrix(KNN)
SC_obj <- ScaleData(SC_obj,features = c(VariableFeatures(SC_obj),SD_gene,Spark_gene))
colnames(SC_obj@assays$RNA@scale.data) <- ST_filter_str(colnames(SC_obj@assays$RNA@scale.data),'-')
for(i in 1:100){
SD_gene_expr <- SC_obj@assays$RNA@scale.data[SD_gene[i],colnames(KNN)]
SD_score <- c(SD_score,as.numeric(t(SD_gene_expr)%*%KNN%*%(SD_gene_expr)))
SPARK_gene_expr <- SC_obj@assays$RNA@scale.data[Spark_gene[i],colnames(KNN)]
SPARK_score <- c(SPARK_score,as.numeric(t(SPARK_gene_expr)%*%KNN%*%(SPARK_gene_expr)))
}
#SD_score <- (SD_score-min(SD_score))/(max(SD_score)-min(SD_score))
#SPARK_score <- (SPARK_score-min(SPARK_score))/(max(SPARK_score)-min(SPARK_score))
names(SD_score) <- SD_gene
names(SPARK_score) <- Spark_gene
saveRDS(SD_score,paste0(savePath,"SD_score.RDS"))
saveRDS(SPARK_score,paste0(savePath,"SPARK_score.RDS"))
x_o <- SD_score
x_e <- SPARK_score
score <- c(x_o,x_e)
lable <- c(rep("SD",length(x_o)),rep("SPARK",length(x_e)))
df <- data.frame(score = score, lable = lable)
p <- gghistogram(df,x = "score", add = "mean", rug = TRUE, fill = "lable",palette = c("#00AFBB","#E7B800"),bins = 30)
ggsave(filename = paste0(savePath,"SDvsSPARK.pdf"),
p, width = 6, height = 5, dpi = 150, limitsize = FALSE)
gl <- intersect(SD_gene,Spark_gene)
feature_plot(gene_plot = gl,SC_obj, Spot_manifest,savePath,savefilename = "UNI_gene_plot",height = 550,pointsize = 2.5)
mc_marker_plot(gl = gl,MC_obj_file,Mc_manifest,Spot_manifest,savePath,savefilename = "UNI_gene_MC_plot")
}
}
if(DEgeneplot){
all.markers <- MD_markers
Mc_pair_SC <- readRDS(file = MC_ident_file)
names(Mc_pair_SC) <- ST_filter_str(names(Mc_pair_SC),"-")
#DoHeatmap(SC_obj, features = top5$gene) + NoLegend()
Spot_manifest <- cbind(Spot_manifest,Mc_pair_SC)
colnames(Spot_manifest)[8] <- "mc"
markers_MC <- all.markers
top20_mc <- markers_MC %>% group_by(cluster) %>% top_n(n = 20, wt = avg_log2FC)
top5_mc <- markers_MC %>% group_by(cluster) %>% top_n(n = 5, wt = avg_log2FC)
top20_mc <- top20_mc$gene
top5_mc <- top5_mc$gene
par(mar=c(10,0.5,0.5,0.5))
cols <- array(getDefaultColors(length(table(Spot_manifest$Walktrap_id))))
rownames(cols) <- Mc_manifest$mc_names
mc_matrix <- MC_obj@assays$RNA@scale.data
annotation_col = data.frame(
#mc_type = Mc_manifest$mc_type,
mc_name = Mc_manifest$mc_names
)
#annotation_col <- annotation_col[sort(annotation_col$mc_names,index.return=TRUE)$ix,]
#annocol <- as.data.frame(annotation_col[,"mc_type"])
annocol <- as.data.frame(annotation_col[,"mc_name"])
rownames(annocol) <- annotation_col$mc_name
colnames(annocol) <- "mc_name"
annocol_mc <- annocol
ann_colors = list(
mc_name = cols
)
#MC_corr <- rcorr(mc_matrix[intersect(rownames(mc_matrix),top20_mc),rownames(annocol)])
MC_corr <- rcorr(mc_matrix[VariableFeatures(SC_obj),rownames(annocol)])
mc_corr <- (MC_corr$r)
tm <- mc_corr
diag(tm) <- 0
mc_max <- max(tm)
diag(mc_corr) <- mc_max
#head(ann_colors)
png(filename=paste0(savePath,"MC_corr.png"), width=1000, height=900)
pheatmap(as.matrix(mc_corr), annotation_col = annocol_mc,annotation_row = annocol_mc,cluster_rows =T,cluster_cols =T,show_colnames = F,legend = T,annotation_colors = ann_colors)
dev.off()
mc_heat <- pheatmap(as.matrix(mc_corr), annotation_col = annocol_mc,annotation_row = annocol_mc,cluster_rows =T,cluster_cols =T,show_colnames = F,legend = F,annotation_colors = ann_colors)
mc_cluster <- mc_heat$tree_row$labels[mc_heat$tree_row$order]
pdf(paste0(savePath,"MC_diffgene_inte_new.pdf"), width=9, height=10)
pheatmap(mc_matrix[top5_mc,mc_cluster], annotation_col =annocol,cluster_rows = F,cluster_cols = F,annotation_colors = ann_colors)
dev.off()
#dev.off()
#mc_cluster <- annotation_col$mc_name
#SC_diff_gene_show
SC_barcode_to_MC <- data.frame(barcode = colnames(SC_obj),Mc_id = Mc_pair_SC)
scrowid <- c()
annocol_cs <- c()
mc_id <- c()
for(i in 1:length(mc_cluster)){
tmidlist <- SC_barcode_to_MC$barcode[which(SC_barcode_to_MC$Mc_id==mc_cluster[i])]
annocol_cs <- c(annocol_cs,rep(Mc_manifest$mc_type[Mc_manifest$mc_names==mc_cluster[i]],Mc_manifest$spot_num.Freq[Mc_manifest$mc_names==mc_cluster[i]]))
scrowid <- c(scrowid,tmidlist)
mc_id <- c(mc_id,rep(mc_cluster[i],Mc_manifest$spot_num.Freq[Mc_manifest$mc_names==mc_cluster[i]]))
}
annocol_cs <- data.frame(mc_id = mc_id)
rownames(annocol_cs) <- scrowid
ann_colors_sc = list(
mc_id = cols
)
SC_obj <- ScaleData(SC_obj,features =rownames(SC_obj))
colnames(SC_obj@assays$RNA@scale.data) <- ST_filter_str(colnames(SC_obj@assays$RNA@scale.data),'-')
sc_matrix <- as.matrix(SC_obj@assays$RNA@scale.data)
rownames(annocol_cs) <- ST_filter_str(rownames(annocol_cs),'-')
show_sc_matrix <- sc_matrix[top5_mc,rownames(annocol_cs)]
show_sc_matrix[which(show_sc_matrix>4)] <- 4
show_sc_matrix[which(show_sc_matrix< -4)] <- -4
num.cluster <- as.data.frame(table(mc_id))
rownames(num.cluster) <- num.cluster[,1]
num.cluster <- num.cluster[mc_cluster,2]
#num.cluster <- num.cluster[as.character(1 : length(num.cluster))]
gaps_col <- cumsum(num.cluster)
de.pre <- list(expr.data = show_sc_matrix, spot.cluster = Spot_manifest$mc, gaps_col = gaps_col)
pdf(paste0(savePath,"SC_diffgene_inte_new.pdf"), width=15, height=10)
#pheatmap(show_sc_matrix, annotation_col =annocol_cs,cluster_rows =T,cluster_cols =F,show_colnames = F,annotation_colors = ann_colors_sc,cutree_cols = length(cols))
pheatmap(de.pre$expr.data,
color = colorRampPalette(c("#4393C3", "white", "#D6604D"))(100),
annotation_col = annocol_cs,
annotation_colors = ann_colors_sc,
fontsize = 7,
gaps_col = de.pre$gaps_col,
cluster_rows = F, cluster_cols = F,
show_colnames = F)
dev.off()
#SC_diff_gene_show
SC_barcode_to_MC <- data.frame(barcode = colnames(SC_obj),Mc_id = Mc_pair_SC)
scrowid <- c()
annocol_cs <- c()
mc_id <- c()
for(i in 1:length(mc_cluster)){
tmidlist <- SC_barcode_to_MC$barcode[which(SC_barcode_to_MC$Mc_id==mc_cluster[i])]
annocol_cs <- c(annocol_cs,rep(Mc_manifest$mc_type[Mc_manifest$mc_names==mc_cluster[i]],Mc_manifest$spot_num.Freq[Mc_manifest$mc_names==mc_cluster[i]]))
scrowid <- c(scrowid,tmidlist)
mc_id <- c(mc_id,rep(mc_cluster[i],Mc_manifest$spot_num.Freq[Mc_manifest$mc_names==mc_cluster[i]]))
}
annocol_cs <- data.frame(mc_id = mc_id)
rownames(annocol_cs) <- scrowid
ann_colors_sc = list(
mc_id = cols
)
SC_obj <- FindVariableFeatures(SC_obj)
scrowid <- ST_filter_str(scrowid,"-")
SC_corr <- rcorr(sc_matrix[VariableFeatures(SC_obj),scrowid])
sc_corr <- (SC_corr$r)
tm <- sc_corr
diag(tm) <- 0
sc_max <- max(tm)
diag(sc_corr) <- sc_max
png(filename=paste0(savePath,"SC_corr.png"), width=1000, height=900)
pheatmap(as.matrix(sc_corr), annotation_col = annocol_cs,annotation_row = annocol_cs,cluster_rows =F,cluster_cols =F,show_colnames = F,show_rownames = F,legend = F,annotation_colors = ann_colors_sc)
dev.off()
}
return(MD_markers)
}
SpaceDiffGene(SC_obj = SC_obj,
Spot_manifest= Spot_manifest_imgunsup,
savePath = savePath,
MC_obj_file = MC_obj_file,
Mc_manifest = Mc_manifest,
methods= "walktrap",
SPARK_file = NULL,
netfile = netfile)
Mc_manifest <- Meta_expr_matrix(exprPath = exprPath,Spot_manifest = Spot_manifest_imgunsup,
imagefile = imagefile,
savePath = savePath,merge_method = "mean")
library(TIST)
Maskfile <- "D:/Gu_lab/space_expr/data/pubdata/V1_Adult_Mouse_Brain/test_package_results/mask1.txt"
imagefile <- "D:/Gu_lab/space_expr/data/pubdata/V1_Adult_Mouse_Brain/spatial/tissue_hires_image.png"
savePath <- "D:/Gu_lab/space_expr/data/pubdata/V1_Adult_Mouse_Brain/test_package_results/"
spaceFile <- "D:/Gu_lab/space_expr/data/pubdata/V1_Adult_Mouse_Brain/spatial/tissue_positions_list.csv"
barcodefile = "D:/Gu_lab/space_expr/data/pubdata/V1_Adult_Mouse_Brain/spatial/Imginit/barcodes.tsv"
exprPath = "D:/Gu_lab/space_expr/data/pubdata/V1_Adult_Mouse_Brain/filtered_feature_bc_matrix/"
sacle_score <- 0.17011142
netfile <- paste0(savePath,"ST_imgunsupnet.RDS")
Spot_manifest_imgunsup <- readRDS(paste0(savePath,"Spot_manifest_imgunsup.RDS"))
Mc_manifest <- Meta_expr_matrix(exprPath = exprPath,Spot_manifest = Spot_manifest_imgunsup,
imagefile = imagefile,
savePath = savePath,merge_method = "mean")
library(plyr)
library(network)
library(tidygraph)
library(igraph)
library(ggraph)
library(scales)
library(STRINGdb)
library(Seurat)
library(progress)
library(lattice)
#library(tidyverse)
library(ggplot2)
library(Matrix)
#library(Rmisc)
library(ggforce)
library(VennDiagram)
library(rjson)
library(cowplot)
library(RColorBrewer)
library(grid)
library(sp)
#library(readbitmap)
library(ggExtra)
library(reshape2)
library(gridExtra)
library(sctransform)
library(pheatmap)
library(Hmisc)#???Ø°?
library(magick)
library(imager)
library(seewave)
library(MASS)
library(NbClust)
library(clv)
library(SPARK)
library(parallel)
library(doParallel)
library(foreach)
library(pracma)
library(CompQuadForm)
library(philentropy)
library(data.table)
#cell interaction
library(CellChat)
library(ggplot2)
library(ggalluvial)
library(svglite)
library(Seurat)
library(mindr)
library(NMF)
library(xlsx)
library(matrixStats)
library(parallel)
library(ggpubr)
library(TIST)
library(CellChat)
Spot_manifest_imgunsup <- Meta_St_img_unsupervised(Maskfile = Maskfile,
imagefile = imagefile,
spaceFile = spaceFile,
exprPath = exprPath,
colors = NULL,
savePath = savePath,
Method = "walktrap",
sacle_score = sacle_score)
Spot_manifest_imgunsup <- readRDS(paste0(savePath,"Spot_manifest_imgunsup.RDS"))
Mc_manifest <- Meta_expr_matrix(exprPath = exprPath,Spot_manifest = Spot_manifest_imgunsup,
imagefile = imagefile,
savePath = savePath,merge_method = "mean")
#' @param exprPath The address where the RNA-seq file is stored. Such as "/home/data/filtered_feature_bc_matrix/".
#' @param Spot_manifest The TIST results returned by function "Meta_St_img_unsupervised"
#' @param savePath The address where the results stored.
#' @param imagefile The address where the Image file is stored. Such as "/home/data/spatial/tissue_hires_image.png".
#' @param merge_method mean or max for neighbor expression
#' @param method TIST network method is "Walktrap_id"
#'
#' @return Mc_manifest
#' @export
#'
Meta_expr_matrix <- function(exprPath,
Spot_manifest,
savePath,
imagefile,
merge_method = "max",
method = "Walktrap_id"){
expr_obj <- Read10X(data.dir = exprPath)
expr_obj <- CreateSeuratObject(counts = expr_obj,min.cells = 3,min.features = 200)
expr_obj <- NormalizeData(object = expr_obj, normalization.method = "LogNormalize")
expr_obj <- FindVariableFeatures(expr_obj,selection.method = "vst", nfeatures = 2000)
expr_obj_scale <- ScaleData(expr_obj, features = VariableFeatures(expr_obj))
expr_col_name <- ST_filter_str(colnames(expr_obj),'-')
mc_id <- Spot_manifest
mc_id <- mc_id[which(mc_id$barcode%in%expr_col_name),]
barcode <- data.frame(barcode = expr_col_name)
mc_id <- merge(barcode,mc_id,by.x = "barcode",by.y = "barcode")
if(method=="Walktrap_id"){
mc_id <- mc_id$Walktrap_id
}
mc_index <-table(mc_id)
mc_names <- paste0("SD_",1:length(mc_index))
Meta_matrix <- matrix(0,nrow =length(rownames(expr_obj)) ,ncol = length(mc_names))
Mc_manifest <- data.frame(mc_names = mc_names,spot_num = mc_index)
#mc_turn <- data.frame(mc_names = mc_names,mc_index =mc_index)
rownames(Mc_manifest) <- Mc_manifest$spot_num.mc_id
Idents(expr_obj) <- Mc_manifest[as.character(mc_id),"mc_names"]
saveRDS(expr_obj,paste0(savePath,"expr_obj.RDS"))
for( i in 1:length(mc_names)){
id <- mc_names[i]
this_expM <- expr_obj@assays$RNA@counts[,which(Idents(expr_obj)==id)]
if(merge_method =="mean"){
Meta_matrix[,i] <- round(rowMeans(this_expM))
}
if(merge_method =="max"){
Meta_matrix[,i] <- max.col(this_expM)
}
}
colnames(Meta_matrix) <- mc_names
rownames(Meta_matrix) <- rownames(expr_obj)
Mc_obj <- CreateSeuratObject(counts = Meta_matrix)
#Mc_obj <- NormalizeData(object = Mc_obj, normalization.method = "LogNormalize")
#feature_num <- length(colnames(Mc_obj))-2
#Mc_obj <- FindVariableFeatures(Mc_obj,selection.method = "vst", nfeatures = feature_num)
#Mc_obj <- ScaleData(Mc_obj, features = rownames(Mc_obj))
#Mc_obj <- RunPCA(Mc_obj,features = VariableFeatures(Mc_obj))
write.csv(Meta_matrix,file = paste0(savePath,"Meta_matrix.csv"))
saveRDS(Mc_obj,paste0(savePath,"Mc_obj.RDS"))
mc_index <- data.frame(org.id = rownames(mc_index),mc.id <- mc_names)
saveRDS(mc_index,paste0(savePath,"mc_index.csv"))
rownames(mc_index) <- mc_index$org.id
saveRDS(Idents(expr_obj),file = paste0(savePath,"MC_idents.RDS"))
saveRDS(Mc_manifest,file = paste0(savePath,"Mc_manifest.RDS"))
return(Mc_manifest)
}
#' @param exprPath The address where the RNA-seq file is stored. Such as "/home/data/filtered_feature_bc_matrix/".
#' @param Spot_manifest The TIST results returned by function "Meta_St_img_unsupervised"
#' @param savePath The address where the results stored.
#' @param imagefile The address where the Image file is stored. Such as "/home/data/spatial/tissue_hires_image.png".
#' @param merge_method mean or max for neighbor expression
#' @param method TIST network method is "Walktrap_id"
#'
#' @return Mc_manifest
#' @export
#'
Meta_expr_matrix <- function(exprPath,
Spot_manifest,
savePath,
imagefile,
merge_method = "max",
method = "Walktrap_id"){
expr_obj <- Read10X(data.dir = exprPath)
expr_obj <- CreateSeuratObject(counts = expr_obj,min.cells = 3,min.features = 200)
expr_obj <- NormalizeData(object = expr_obj, normalization.method = "LogNormalize")
expr_obj <- FindVariableFeatures(expr_obj,selection.method = "vst", nfeatures = 2000)
expr_obj_scale <- ScaleData(expr_obj, features = VariableFeatures(expr_obj))
expr_col_name <- ST_filter_str(colnames(expr_obj),'-')
mc_id <- Spot_manifest
mc_id <- mc_id[which(mc_id$barcode%in%expr_col_name),]
barcode <- data.frame(barcode = expr_col_name)
mc_id <- merge(barcode,mc_id,by.x = "barcode",by.y = "barcode")
if(method=="Walktrap_id"){
mc_id <- mc_id$Walktrap_id
}
mc_index <-table(mc_id)
mc_names <- paste0("SD_",1:length(mc_index))
Meta_matrix <- matrix(0,nrow =length(rownames(expr_obj)) ,ncol = length(mc_names))
Mc_manifest <- data.frame(mc_names = mc_names,spot_num = mc_index)
#mc_turn <- data.frame(mc_names = mc_names,mc_index =mc_index)
rownames(Mc_manifest) <- Mc_manifest$spot_num.mc_id
Idents(expr_obj) <- Mc_manifest[as.character(mc_id),"mc_names"]
saveRDS(expr_obj,paste0(savePath,"expr_obj.RDS"))
for( i in 1:length(mc_names)){
id <- mc_names[i]
this_expM <- expr_obj@assays$RNA@counts[,which(Idents(expr_obj)==id)]
if(merge_method =="mean"){
Meta_matrix[,i] <- round(rowMeans(this_expM))
}
if(merge_method =="max"){
Meta_matrix[,i] <- max.col(this_expM)
}
}
colnames(Meta_matrix) <- mc_names
rownames(Meta_matrix) <- rownames(expr_obj)
Mc_obj <- CreateSeuratObject(counts = Meta_matrix)
#Mc_obj <- NormalizeData(object = Mc_obj, normalization.method = "LogNormalize")
#feature_num <- length(colnames(Mc_obj))-2
#Mc_obj <- FindVariableFeatures(Mc_obj,selection.method = "vst", nfeatures = feature_num)
#Mc_obj <- ScaleData(Mc_obj, features = rownames(Mc_obj))
#Mc_obj <- RunPCA(Mc_obj,features = VariableFeatures(Mc_obj))
write.csv(Meta_matrix,file = paste0(savePath,"Meta_matrix.csv"))
saveRDS(Mc_obj,paste0(savePath,"Mc_obj.RDS"))
mc_index <- data.frame(org.id = rownames(mc_index),mc.id <- mc_names)
saveRDS(mc_index,paste0(savePath,"mc_index.csv"))
rownames(mc_index) <- mc_index$org.id
saveRDS(Idents(expr_obj),file = paste0(savePath,"MC_idents.RDS"))
saveRDS(Mc_manifest,file = paste0(savePath,"Mc_manifest.RDS"))
return(Mc_manifest)
}
Mc_manifest <- Meta_expr_matrix(exprPath = exprPath,Spot_manifest = Spot_manifest_imgunsup,
imagefile = imagefile,
savePath = savePath,merge_method = "mean")
library(TIST)
library(TIST)
Mc_manifest <- Meta_expr_matrix(exprPath = exprPath,Spot_manifest = Spot_manifest_imgunsup,
imagefile = imagefile,
savePath = savePath,merge_method = "mean")
SC_obj_file <- paste0(savePath,"expr_obj.RDS")
MD_marker_file <- paste0(savePath,"MD_markers.RDS")
MC_obj_file <- paste0(savePath,"Mc_obj.RDS")
MC_ident_file <- paste0(savePath,"MC_idents.RDS")
netfile <- paste0(savePath,"ST_imgunsupnet.RDS")
SPARK_file <- paste0(savePath,"SPARK.rds")
Spark_methods(exprPath,
spaceFile,
savePath)
#' @export
#'
#' @examples
#' \donttest{
#'    Spark_methods(exprPath,
#'    spaceFile,
#'    savePath)
#' }
#'
#'
Spark_methods <- function(exprPath,
spaceFile,
savePath){
expr_obj <- Read10X(data.dir = exprPath)
expr_obj <- CreateSeuratObject(counts = expr_obj,min.cells = 3,min.features = 200)
expr_obj <- NormalizeData(object = expr_obj, normalization.method = "LogNormalize")
expr_obj <- FindVariableFeatures(expr_obj,selection.method = "vst", nfeatures = 2000)
Spot_space <- read.csv(file = spaceFile,header = F)
sel.cols <- c("barcode","tissue", "row", "col", "imagerow", "imagecol")
colnames(Spot_space) <- sel.cols
Spot_space$barcode <- ST_filter_str(Spot_space$barcode,'-')
colnames(expr_obj@assays$RNA@data) <- ST_filter_str(colnames(expr_obj@assays$RNA@data),'-')
Spot_space <- Spot_space[which(Spot_space$barcode%in%colnames(expr_obj@assays$RNA@data)),]
Spot_manifest <- Spot_space
rawcount <- expr_obj@assays$RNA@counts[which(rownames(expr_obj@assays$RNA@counts)%in%VariableFeatures(expr_obj)),]
count <- as.matrix(rawcount)
colnames(count) <- ST_filter_str(colnames(count),'-')
#Spot_manifest <- Spot_manifest[which(colnames(count)%in%Spot_manifest$barcode),]
setorder(setDT(Spot_manifest)[, barcode := colnames(count)], barcode)
info <- Spot_manifest[,c(3,4)]
info <- as.data.frame(info)
colnames(info) <- c("y","x")
info$y <- 0-info$y
rownames(info) <- Spot_manifest$barcode
spark <- CreateSPARKObject(counts = (count), location = info[, 1:2],
percentage = 0.1, min_total_counts = 10)
spark@lib_size <- apply(spark@counts, 2, sum)
spark <- spark.vc(spark, covariates = NULL, lib_size = spark@lib_size, verbose = T, fit.maxiter = 500)
spark <- spark.test(spark, check_positive = T, verbose = T)
saveRDS(spark, file = paste0(savePath,"SPARK.rds"))
}
Spark_X_methods <- function(exprPath,
spaceFile,
savePath){
expr_obj <- Read10X(data.dir = exprPath)
expr_obj <- CreateSeuratObject(counts = expr_obj,min.cells = 3,min.features = 200)
expr_obj <- NormalizeData(object = expr_obj, normalization.method = "LogNormalize")
sp_count <- as.matrix(expr_obj@assays$RNA@counts)
Spot_space <- read.csv(file = spaceFile,header = F)
sel.cols <- c("barcode","tissue", "row", "col", "imagerow", "imagecol")
colnames(Spot_space) <- sel.cols
#Spot_space$barcode <- ST_filter_str(Spot_space$barcode,'-')
Spot_space <- Spot_space[which(Spot_space$barcode%in%colnames(expr_obj@assays$RNA@data)),]
Spot_manifest <- Spot_space
info <- Spot_manifest[,c("row","col")]
rownames(info) <- Spot_manifest$barcode
location <- as.matrix(info)
mt_idx <- grep("mt-",rownames(sp_count))
if(length(mt_idx)!=0){
sp_count    <- sp_count[-mt_idx,]
}
sparkX <- sparkx(sp_count,location,numCores=1,option="mixture")
saveRDS(sparkX, file = paste0(savePath,"sparkX.rds"))
#head(spark@res_mtest[,c("combined_pvalue","adjusted_pvalue")])
#features3 <- spark@res_mtest
#features3<- features3[sort(features3$combined_pvalue,index.return=TRUE)$ix,]
}
Spark_methods(exprPath,
spaceFile,
savePath)
library(TIST)
netfile <- paste0(savePath,"ST_imgunsupnet.RDS")
Spot_manifest_imgunsup <- Meta_St_img_unsupervised(Maskfile = Maskfile,
imagefile = imagefile,
spaceFile = spaceFile,
exprPath = exprPath,
colors = NULL,
savePath = savePath,
Method = "walktrap",
sacle_score = sacle_score)
library(TIST)
library(TIST)
Mc_manifest <- Meta_expr_matrix(exprPath = exprPath,Spot_manifest = Spot_manifest_imgunsup,
imagefile = imagefile,
savePath = savePath,merge_method = "mean")
SC_obj_file <- paste0(savePath,"expr_obj.RDS")
MD_marker_file <- paste0(savePath,"MD_markers.RDS")
MC_obj_file <- paste0(savePath,"Mc_obj.RDS")
MC_ident_file <- paste0(savePath,"MC_idents.RDS")
netfile <- paste0(savePath,"ST_imgunsupnet.RDS")
SPARK_file <- paste0(savePath,"SPARK.rds")
Spark_methods(exprPath,
spaceFile,
savePath)
SpaceDiffGene(SC_obj = SC_obj,
Spot_manifest= Spot_manifest_imgunsup,
savePath = savePath,
MC_obj_file = MC_obj_file,
Mc_manifest = Mc_manifest,
methods= "walktrap",
SPARK_file = NULL,
netfile = netfile)
SC_obj <- readRDS(SC_obj_file)
SpaceDiffGene(SC_obj = SC_obj,
Spot_manifest= Spot_manifest_imgunsup,
savePath = savePath,
MC_obj_file = MC_obj_file,
Mc_manifest = Mc_manifest,
methods= "walktrap",
SPARK_file = NULL,
netfile = netfile)
Mc_manifest <- Meta_expr_matrix(exprPath = exprPath,Spot_manifest = Spot_manifest_imgunsup,
imagefile = imagefile,
savePath = savePath,merge_method = "mean")
remove.packages("TIST", lib="~/R/win-library/4.1")
install.packages("D:/Gu_lab/space_expr/code/TIST/TIST/TIST_1.0.0.tar.gz", repos = NULL, type = "source")
