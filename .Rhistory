yi <- Spot_manifest$col[idx]
xj <- Spot_manifest$row[idy]
yj <- Spot_manifest$col[idy]
ximgrow = round(Spot_manifest[idx,"imagerow"]*sacle_score)
ximgcol = round(Spot_manifest[idx,"imagecol"]*sacle_score)
yimgrow = round(Spot_manifest[idy,"imagerow"]*sacle_score)
yimgcol = round(Spot_manifest[idy,"imagecol"]*sacle_score)
distodis = abs(xj-xi)+abs(yj-yi)#
M1 = tm_matrix[(ximgcol-spot_r_max):(ximgcol+spot_r_max),(ximgrow-spot_r_max):(ximgrow+spot_r_max)]
M2 = tm_matrix[(yimgcol-spot_r_max):(yimgcol+spot_r_max),(yimgrow-spot_r_max):(yimgrow+spot_r_max)]
plot(as.cimg(M1))
M1_v <- hist(as.vector(M1)[which(as.vector(M1)>0)],breaks = seq(0,cluster_num,length.out = cluster_num),plot = F)$counts/sum( hist(as.vector(M1)[which(as.vector(M1)>0)],breaks = seq(0,cluster_num,length.out = cluster_num),plot = F)$counts)
M1_v
remove.packages("TIST")
install.packages("D:/Gu_lab/space_expr/code/TIST/TIST/TIST_1.0.0.tar.gz", repos = NULL, type = "source")
Maskfile <- "D:/Gu_lab/space_expr/data/pubdata/V1_Adult_Mouse_Brain/spatial/Imginit/mask1.txt"
imagefile <- "D:/Gu_lab/space_expr/data/pubdata/V1_Adult_Mouse_Brain/spatial/tissue_hires_image.png"
savePath <- "D:/Gu_lab/space_expr/data/pubdata/V1_Adult_Mouse_Brain/test_package_results/"
spaceFile <- "D:/Gu_lab/space_expr/data/pubdata/V1_Adult_Mouse_Brain/spatial/tissue_positions_list.csv"
barcodefile = "D:/Gu_lab/space_expr/data/pubdata/V1_Adult_Mouse_Brain/spatial/Imginit/barcodes.tsv"
exprPath = "D:/Gu_lab/space_expr/data/pubdata/V1_Adult_Mouse_Brain/filtered_feature_bc_matrix/"
sacle_score <- 0.17011142
Spot_manifest_imgunsup <- Meta_St_img_unsupervised(Maskfile = Maskfile,
imagefile = imagefile,
spaceFile = spaceFile,
exprPath = exprPath,
colors = NULL,
savePath = savePath,
Method = "walktrap",
sacle_score = sacle_score)
print(Sys.time())
Spot_manifest_imgunsup <- Meta_St_img_unsupervised(Maskfile = Maskfile,
imagefile = imagefile,
spaceFile = spaceFile,
exprPath = exprPath,
colors = NULL,
savePath = savePath,
Method = "walktrap",
sacle_score = sacle_score)
print(Sys.time())
img <- load.image(imagefile)
#image_info(img)
Mask <- read.table(file = Maskfile,sep = ',')
Mask <- as.matrix(Mask)
Mask <- as.cimg(t(Mask))
img_m <- img
R(img_m) <-R(img_m)*Mask
G(img_m) <-G(img_m)*Mask
B(img_m) <-B(img_m)*Mask
plot(img_m)
#grayscale(img_m) %>% hist(main="Luminance values in boats picture")
#R(img_m) %>% hist(main="Red channel values in boats picture")
#bdf <- as.data.frame(img_m)
#head(bdf,3)
#bdf <- mutate(bdf,channel=factor(cc,labels=c('R','G','B')))
#ggplot(bdf,aes(value,col=channel))+geom_histogram(bins=30)+facet_wrap(~ channel)
img_org <- img_m
im <- grayscale(img_org) %>% isoblur(2)
im <- im * Mask
#im <- imsharpen(im,2)
#im <- isoblur(im,10)
#im <- grayscale(img_org)
plot(im)
###cal marcov RF for im
mcim <- as.matrix(im)
plot(as.cimg(label))
expr_obj <- Read10X(data.dir = exprPath)
expr_obj <- CreateSeuratObject(counts = expr_obj,min.cells = 3,min.features = 200)
expr_obj <- NormalizeData(object = expr_obj)
expr_obj <- FindVariableFeatures(expr_obj,selection.method = "vst", nfeatures = 2000)
expr_obj_scale <- ScaleData(expr_obj, features = VariableFeatures(expr_obj))
expr_obj_scale <- RunPCA(expr_obj_scale)
expr_obj_scale <- FindNeighbors(expr_obj_scale)
cellcorr <- as.matrix(expr_obj_scale@graphs$RNA_snn)
colnames(cellcorr) <- ST_filter_str(colnames(cellcorr),'-')
rownames(cellcorr) <- ST_filter_str(rownames(cellcorr),'-')
#expr_data <- as.matrix(expr_obj_scale@assays$RNA@data)
expr_data <- expr_obj_scale@assays$RNA@scale.data
Spot_space <- read.csv(file = spaceFile,header = F)
sel.cols <- c("barcode","tissue", "row", "col", "imagerow", "imagecol")
colnames(Spot_space) <- sel.cols
Spot_space$barcode <- ST_filter_str(Spot_space$barcode,'-')
colnames(expr_obj_scale@assays$RNA@scale.data) <- ST_filter_str(colnames(expr_obj_scale@assays$RNA@scale.data),'-')
Spot_space <- Spot_space[which(Spot_space$barcode%in%colnames(expr_obj_scale@assays$RNA@scale.data)),]
Spot_manifest <- Spot_space
nodes <- Spot_manifest[,c("barcode")]
nodes <- cbind(1:length(nodes),nodes)
nodes <- data.frame(nodes)
colnames(nodes) <- c("id","name")
edges <- data.frame()
#tm_matrix <- as.matrix(grayscale(img_org))
#cellcorr <- cellcorr[which(rownames(cellcorr)%in%sample_bar),which(colnames(cellcorr)%in%sample_bar)]
#tm_matrix <- as.matrix(im)
tm_matrix <- as.matrix(label)
tm_matrix_org <- as.matrix(im)
col <- array(c("#f5f5f5",getDefaultColors(n = 400)))
rownames(col) <- c(0,1:400)
len <- length(colnames(cellcorr))
#calculate Sdbw matrix
img_info_matrix <- matrix(data = 0,nrow = length(Spot_manifest$barcode),ncol = 199)
for(i in 1:length(Spot_manifest$barcode)){
id <- which(Spot_manifest$barcode==colnames(cellcorr)[i])
ximgrow = round(Spot_manifest[id,"imagerow"]*sacle_score)
ximgcol = round(Spot_manifest[id,"imagecol"]*sacle_score)
M1 = mcim[(ximgcol-spot_r_max):(ximgcol+spot_r_max),(ximgrow-spot_r_max):(ximgrow+spot_r_max)]
M1_v <- as.vector(M1)
MM <- hist(M1_v,breaks = seq(min(mcim),max(mcim),length.out = 200),plot = F)$counts/sum(hist(M1_v,breaks = seq(min(mcim),max(mcim),length.out = 200),plot = F)$counts)
img_info_matrix[i,] <- MM
}
#Spot_manifest <- Spot_manifest[sort(Spot_manifest$col,index.return=TRUE)$ix,]
#Spot_manifest <- Spot_manifest[sort(Spot_manifest$row,index.return=TRUE)$ix,]
nodes <- Spot_manifest[,c("barcode")]
nodes <- cbind(1:length(nodes),nodes)
nodes <- data.frame(nodes)
colnames(nodes) <- c("id","name")
edges <- data.frame()
#tm_matrix <- as.matrix(grayscale(img_org))
#cellcorr <- cellcorr[which(rownames(cellcorr)%in%sample_bar),which(colnames(cellcorr)%in%sample_bar)]
#tm_matrix <- as.matrix(im)
tm_matrix <- as.matrix(label)
tm_matrix_org <- as.matrix(im)
col <- array(c("#f5f5f5",getDefaultColors(n = 400)))
rownames(col) <- c(0,1:400)
len <- length(colnames(cellcorr))
sample_id <- which(cellcorr!=0)
for(td in 1:length(sample_id)){
tt <- sample_id[td]
i = ceiling(tt/len)
j = tt%%len
if(j==0) j = len
if(i<=j) next
idx <- which(Spot_manifest$barcode==colnames(cellcorr)[i])
idy <- which(Spot_manifest$barcode==colnames(cellcorr)[j])
xi <- Spot_manifest$row[idx]
yi <- Spot_manifest$col[idx]
xj <- Spot_manifest$row[idy]
yj <- Spot_manifest$col[idy]
ximgrow = round(Spot_manifest[idx,"imagerow"]*sacle_score)
ximgcol = round(Spot_manifest[idx,"imagecol"]*sacle_score)
yimgrow = round(Spot_manifest[idy,"imagerow"]*sacle_score)
yimgcol = round(Spot_manifest[idy,"imagecol"]*sacle_score)
distodis = abs(xj-xi)+abs(yj-yi)#
M1 = tm_matrix[(ximgcol-spot_r_max):(ximgcol+spot_r_max),(ximgrow-spot_r_max):(ximgrow+spot_r_max)]
M2 = tm_matrix[(yimgcol-spot_r_max):(yimgcol+spot_r_max),(yimgrow-spot_r_max):(yimgrow+spot_r_max)]
if(length(which(M1>0))==0) next
if(length(which(M2>0))==0) next
M1_v <- hist(as.vector(M1)[which(as.vector(M1)>0)],breaks = seq(0,cluster_num,length.out = cluster_num),plot = F)$counts/(sum( hist(as.vector(M1)[which(as.vector(M1)>0)],breaks = seq(0,cluster_num,length.out = cluster_num),plot = F)$counts)+0.001)
M2_v <- hist(as.vector(M2)[which(as.vector(M2)>0)],breaks = seq(0,cluster_num,length.out = cluster_num),plot = F)$counts/(sum( hist(as.vector(M2)[which(as.vector(M2)>0)],breaks = seq(0,cluster_num,length.out = cluster_num),plot = F)$counts)+0.001)
weight_1 <- 1-max(min(distance(rbind(M1_v,M2_v),method = 'kullback-leibler',test.na = F,mute.message = T),1))
M1 = tm_matrix[(ximgcol-spot_r_min):(ximgcol+spot_r_min),(ximgrow-spot_r_min):(ximgrow+spot_r_min)]
M2 = tm_matrix[(yimgcol-spot_r_min):(yimgcol+spot_r_min),(yimgrow-spot_r_min):(yimgrow+spot_r_min)]
M1_v <- hist(as.vector(M1)[which(as.vector(M1)>0)],breaks = seq(0,cluster_num,length.out = cluster_num),plot = F)$counts/(sum( hist(as.vector(M1)[which(as.vector(M1)>0)],breaks = seq(0,cluster_num,length.out = cluster_num),plot = F)$counts)+0.001)
M2_v <- hist(as.vector(M2)[which(as.vector(M2)>0)],breaks = seq(0,cluster_num,length.out = cluster_num),plot = F)$counts/(sum( hist(as.vector(M2)[which(as.vector(M2)>0)],breaks = seq(0,cluster_num,length.out = cluster_num),plot = F)$counts)+0.001)
weight_2 <-  1-max(min(distance(rbind(M1_v,M2_v),method = 'kullback-leibler',test.na = F,mute.message = T),1))
M1 = tm_matrix_org[(ximgcol-spot_r_max):(ximgcol+spot_r_max),(ximgrow-spot_r_max):(ximgrow+spot_r_max)]
M2 = tm_matrix_org[(yimgcol-spot_r_max):(yimgcol+spot_r_max),(yimgrow-spot_r_max):(yimgrow+spot_r_max)]
M1_v <- as.vector(M1)[which(as.vector(M1)>0)]
M2_v <- as.vector(M2)[which(as.vector(M2)>0)]
mean_diff_max <- abs(mean(M1_v)-mean(M2_v))*255
M1 = tm_matrix_org[(ximgcol-spot_r_min):(ximgcol+spot_r_min),(ximgrow-spot_r_min):(ximgrow+spot_r_min)]
M2 = tm_matrix_org[(yimgcol-spot_r_min):(yimgcol+spot_r_min),(yimgrow-spot_r_min):(yimgrow+spot_r_min)]
M1_v <- as.vector(M1)[which(as.vector(M1)>0)]
M2_v <- as.vector(M2)[which(as.vector(M2)>0)]
mean_diff_min <- abs(mean(M1_v)-mean(M2_v))*255
weight_3 <- min(1,1/(mean_diff_max + mean_diff_min + 1))
weight <- min((cellcorr[i,j]+img_import*0.5*(weight_1+weight_2+weight_3))/(img_import+1),1)
weight <- min(weight*10/distodis,1)  #
#weight <- cellcorr[i,j] + weight*3/distodis
edges <- rbind(edges,c(nodes$id[which(nodes$name==colnames(cellcorr)[i])],nodes$id[which(nodes$name==colnames(cellcorr)[j])],weight))
}
colnames(edges) <- c("from","to","weight")
edges <- unique(edges)
edges$weight <- as.numeric(edges$weight)
ST_net <- graph_from_data_frame(
d = edges,
vertices = nodes,
directed = F)
saveRDS(ST_net,file = paste0(savePath,"ST_imgunsupnet.RDS"))
expr_data <- expr_obj_scale@assays$RNA@scale.data
hist(E(ST_net)$weight[which(E(ST_net)$weight>0.01)])
usethis::use_vignette("my-vignette")
Maskfile <- "D:/Gu_lab/space_expr/data/pubdata/V1_Adult_Mouse_Brain/spatial/Imginit/mask1.txt"
imagefile <- "D:/Gu_lab/space_expr/data/pubdata/V1_Adult_Mouse_Brain/spatial/tissue_hires_image.png"
savePath <- "D:/Gu_lab/space_expr/data/pubdata/V1_Adult_Mouse_Brain/test_package_results/"
spaceFile <- "D:/Gu_lab/space_expr/data/pubdata/V1_Adult_Mouse_Brain/spatial/tissue_positions_list.csv"
barcodefile = "D:/Gu_lab/space_expr/data/pubdata/V1_Adult_Mouse_Brain/spatial/Imginit/barcodes.tsv"
exprPath = "D:/Gu_lab/space_expr/data/pubdata/V1_Adult_Mouse_Brain/filtered_feature_bc_matrix/"
sacle_score <- 0.17011142
options(stringsAsFactors = F )
library(plyr)
library(network)
library(tidygraph)
library(igraph)
library(ggraph)
library(scales)
library(STRINGdb)
library(Seurat)
library(progress)
library(lattice)
#library(tidyverse)
library(ggplot2)
library(Matrix)
#library(Rmisc)
library(ggforce)
library(VennDiagram)
library(rjson)
library(cowplot)
library(RColorBrewer)
library(grid)
library(sp)
#library(readbitmap)
library(ggExtra)
library(reshape2)
library(gridExtra)
library(sctransform)
library(pheatmap)
library(Hmisc)#???ذ?
library(magick)
library(imager)
library(seewave)
library(MASS)
library(NbClust)
library(clv)
library(SPARK)
library(parallel)
library(doParallel)
library(foreach)
library(pracma)
library(CompQuadForm)
library(philentropy)
library(data.table)
#cell interaction
library(CellChat)
library(ggplot2)
library(ggalluvial)
library(svglite)
library(Seurat)
library(mindr)
library(NMF)
library(xlsx)
library(matrixStats)
library(parallel)
library(ggpubr)
library(TIST)
library(CellChat)
#' ggplot_config
#'
#' @param base.size The size of text.
#'
#' @return A theme.
#' @export
#'
ggplot_config <- function(base.size = 8){
p <- theme_classic() +
theme(plot.title = element_text(size = 2 * base.size),
axis.title.x = element_text(size = 2 * base.size, vjust = -0.2),
axis.title.y = element_text(size = 2 * base.size, vjust = 0.2),
axis.text.x = element_text(size = 2 * base.size),
axis.text.y = element_text(size = 2 * base.size),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title = element_text(size = 2 * base.size - 2),
legend.text = element_text(size = 1.5 * base.size)
)
return(p)
}
##############reference################
getDefaultColors <- function(n = NULL, type = 1){
if(type == 1){
colors <- c("#cb7c77", "#68d359", "#6a7dc9", "#c9d73d", "#c555cb",
"#d7652d", "#7cd5c8", "#c49a3f", "#507d41", "#5d8d9c",
"#90353b", "#674c2a", "#1B9E77", "#c5383c", "#0081d1",
"#ffd900", "#502e71", "#c8b693", "#aed688", "#f6a97a",
"#c6a5cc", "#798234", "#6b42c8", "#cf4c8b", "#666666",
"#feb308", "#ff1a1a", "#1aff1a", "#1a1aff", "#ffff1a")
}else if(type == 2){
if(n <= 8){
colors <- c("#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3",
"#A6D854", "#FFD92F", "#E5C494", "#B3B3B3")
}else if(n <= 14){
colors <- c("#437BFE", "#FEC643", "#43FE69", "#FE6943", "#C643FE",
"#43D9FE", "#B87A3D", "#679966", "#993333", "#7F6699",
"#E78AC3", "#333399", "#A6D854", "#E5C494")
}
else if(n <= 20){
colors <- c("#87b3d4", "#d5492f", "#6bd155", "#683ec2", "#c9d754",
"#d04dc7", "#81d8ae", "#d34a76", "#607d3a", "#6d76cb",
"#ce9d3f", "#81357a", "#d3c3a4", "#3c2f5a", "#b96f49",
"#4e857e", "#6e282c", "#d293c8", "#393a2a", "#997579")
}else if(n <= 30){
colors <- c("#628bac", "#ceda3f", "#7e39c9", "#72d852", "#d849cc",
"#5e8f37", "#5956c8", "#cfa53f", "#392766", "#c7da8b",
"#8d378c", "#68d9a3", "#dd3e34", "#8ed4d5", "#d84787",
"#498770", "#c581d3", "#d27333", "#6680cb", "#83662e",
"#cab7da", "#364627", "#d16263", "#2d384d", "#e0b495",
"#4b272a", "#919071", "#7b3860", "#843028", "#bb7d91")
}else{
colors <- c("#982f29", "#5ddb53", "#8b35d6", "#a9e047", "#4836be",
"#e0dc33", "#d248d5", "#61a338", "#9765e5", "#69df96",
"#7f3095", "#d0d56a", "#371c6b", "#cfa738", "#5066d1",
"#e08930", "#6a8bd3", "#da4f1e", "#83e6d6", "#df4341",
"#6ebad4", "#e34c75", "#50975f", "#d548a4", "#badb97",
"#b377cf", "#899140", "#564d8b", "#ddb67f", "#292344",
"#d0cdb8", "#421b28", "#5eae99", "#a03259", "#406024",
"#e598d7", "#343b20", "#bbb5d9", "#975223", "#576e8b",
"#d97f5e", "#253e44", "#de959b", "#417265", "#712b5b",
"#8c6d30", "#a56c95", "#5f3121", "#8f846e", "#8f5b5c")
}
}else if(type == 3){
# colors <- c("#07a2a4", "#9a7fd1", "#588dd5", "#f5994e",
#             "#c05050", "#59678c", "#c9ab00", "#7eb00a")
colors <- c("#c14089", "#6f5553", "#E5C494", "#738f4c", "#bb6240",
"#66C2A5", "#2dfd29", "#0c0fdc")
}
if(!is.null(n)){
if(n <= length(colors)){
colors <- colors[1:n]
}else{
step <- 16777200 %/% (n - length(colors)) - 2
add.colors <- paste0("#", as.hexmode(seq(from = sample(1:step, 1),
by = step, length.out = (n-length(colors)))))
colors <- c(colors, add.colors)
}
}
return(colors)
}
getColors <- function(n){
if(n==6){
colors <- c("#cb7c77", "#68d359", "#6a7dc9", "#c9d73d", "#c555cb","#f5f5f5")
}
if(n==5){
colors <- c("#cb7c77", "#68d359", "#6a7dc9", "#c9d73d", "#f5f5f5")
}
if(n==7){
colors <- c("#cb7c77", "#68d359", "#6a7dc9", "#c9d73d", "#d7652d", "#7cd5c8", "#f5f5f5")
}
if(n>7){
colors <- c("#cb7c77", "#68d359", "#6a7dc9", "#c9d73d", "#f5f5f5","#c555cb",
"#d7652d", "#7cd5c8", "#c49a3f", "#507d41", "#5d8d9c",
"#90353b", "#674c2a", "#1B9E77", "#c5383c", "#0081d1",
"#ffd900", "#502e71", "#c8b693", "#aed688", "#f6a97a",
"#c6a5cc", "#798234", "#6b42c8", "#cf4c8b", "#666666",
"#feb308", "#ff1a1a", "#1aff1a", "#1a1aff", "#ffff1a")
}
return(colors)
}
col <- array(c("#f5f5f5",getDefaultColors(n = 400)))
col
install.packages("D:/Gu_lab/space_expr/code/TIST/TIST/TIST_1.0.0.zip", repos = NULL, type = "win.binary")
library(TIST)
options(stringsAsFactors = F )
library(plyr)
library(network)
library(tidygraph)
library(igraph)
library(ggraph)
library(scales)
library(STRINGdb)
library(Seurat)
library(progress)
library(lattice)
#library(tidyverse)
library(ggplot2)
library(Matrix)
#library(Rmisc)
library(ggforce)
library(VennDiagram)
library(rjson)
library(cowplot)
library(RColorBrewer)
library(grid)
library(sp)
#library(readbitmap)
library(ggExtra)
library(reshape2)
library(gridExtra)
library(sctransform)
library(pheatmap)
library(Hmisc)#???ذ?
library(magick)
library(imager)
library(seewave)
library(MASS)
library(NbClust)
library(clv)
library(SPARK)
library(parallel)
library(doParallel)
library(foreach)
library(pracma)
library(CompQuadForm)
library(philentropy)
library(data.table)
#cell interaction
library(CellChat)
library(ggplot2)
library(ggalluvial)
library(svglite)
library(Seurat)
library(mindr)
library(NMF)
library(xlsx)
library(matrixStats)
library(parallel)
library(ggpubr)
library(TIST)
library(CellChat)
options(stringsAsFactors = F )
library(TIST)
Maskfile <- "D:/Gu_lab/space_expr/data/pubdata/V1_Adult_Mouse_Brain/test_package_results/mask1.txt"
imagefile <- "D:/Gu_lab/space_expr/data/pubdata/V1_Adult_Mouse_Brain/spatial/tissue_hires_image.png"
savePath <- "D:/Gu_lab/space_expr/data/pubdata/V1_Adult_Mouse_Brain/test_package_results/"
spaceFile <- "D:/Gu_lab/space_expr/data/pubdata/V1_Adult_Mouse_Brain/spatial/tissue_positions_list.csv"
barcodefile = "D:/Gu_lab/space_expr/data/pubdata/V1_Adult_Mouse_Brain/spatial/Imginit/barcodes.tsv"
exprPath = "D:/Gu_lab/space_expr/data/pubdata/V1_Adult_Mouse_Brain/filtered_feature_bc_matrix/"
sacle_score <- 0.17011142
#img and seqRNA unsuper
print(Sys.time())
Spot_manifest_imgunsup <- Meta_St_img_unsupervised(Maskfile = Maskfile,
imagefile = imagefile,
spaceFile = spaceFile,
exprPath = exprPath,
colors = NULL,
savePath = savePath,
Method = "walktrap",
sacle_score = sacle_score)
library(plyr)
library(network)
library(tidygraph)
library(igraph)
library(ggraph)
library(scales)
library(STRINGdb)
library(Seurat)
library(progress)
library(lattice)
#library(tidyverse)
library(ggplot2)
library(Matrix)
#library(Rmisc)
library(ggforce)
library(VennDiagram)
library(rjson)
library(cowplot)
library(RColorBrewer)
library(grid)
library(sp)
#library(readbitmap)
library(ggExtra)
library(reshape2)
library(gridExtra)
library(sctransform)
library(pheatmap)
library(Hmisc)#???ذ?
library(magick)
library(imager)
library(seewave)
library(MASS)
library(NbClust)
library(clv)
library(SPARK)
library(parallel)
library(doParallel)
library(foreach)
library(pracma)
library(CompQuadForm)
library(philentropy)
library(data.table)
#cell interaction
library(CellChat)
library(ggplot2)
library(ggalluvial)
library(svglite)
library(Seurat)
library(mindr)
library(NMF)
library(xlsx)
library(matrixStats)
library(parallel)
library(ggpubr)
library(TIST)
library(CellChat)
Spot_manifest_imgunsup <- Meta_St_img_unsupervised(Maskfile = Maskfile,
imagefile = imagefile,
spaceFile = spaceFile,
exprPath = exprPath,
colors = NULL,
savePath = savePath,
Method = "walktrap",
sacle_score = sacle_score)
library("TIST", lib.loc="~/R/win-library/4.1")
remove.packages("TIST", lib="~/R/win-library/4.1")
install.packages("D:/Gu_lab/space_expr/code/TIST/TIST/TIST_1.0.0.zip", repos = NULL, type = "win.binary")
install.packages("D:/Gu_lab/space_expr/code/TIST/TIST/TIST_1.0.0.zip", repos = NULL, type = "win.binary")
library(TIST)
Maskfile <- "D:/Gu_lab/space_expr/data/pubdata/V1_Adult_Mouse_Brain/test_package_results/mask1.txt"
imagefile <- "D:/Gu_lab/space_expr/data/pubdata/V1_Adult_Mouse_Brain/spatial/tissue_hires_image.png"
savePath <- "D:/Gu_lab/space_expr/data/pubdata/V1_Adult_Mouse_Brain/test_package_results/"
spaceFile <- "D:/Gu_lab/space_expr/data/pubdata/V1_Adult_Mouse_Brain/spatial/tissue_positions_list.csv"
barcodefile = "D:/Gu_lab/space_expr/data/pubdata/V1_Adult_Mouse_Brain/spatial/Imginit/barcodes.tsv"
exprPath = "D:/Gu_lab/space_expr/data/pubdata/V1_Adult_Mouse_Brain/filtered_feature_bc_matrix/"
sacle_score <- 0.17011142
Spot_manifest_imgunsup <- Meta_St_img_unsupervised(Maskfile = Maskfile,
imagefile = imagefile,
spaceFile = spaceFile,
exprPath = exprPath,
colors = NULL,
savePath = savePath,
Method = "walktrap",
sacle_score = sacle_score)
library(TIST)
array(c("#f5f5f5",getDefaultColors(n = 400)))
